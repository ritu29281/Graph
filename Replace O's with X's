Given a matrix mat of size N x M where every element is either 'O' or 'X'. Replace all 'O' with 'X' that are surrounded by 'X'.

A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.

Input: 
n = 5, m = 4
mat = {{'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: 
ans = {{'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
CODE:

void dfs(int row,int col,vector<vector<char>>& mat, vector<vector<char>>&ans,int n,int m){
      ans[row][col]='O';
      int dx[]={-1,0,1,0};
      int dy[]={0,1,0,-1};
      for(int i=0;i<4;i++){
          int nrow=row+dx[i];
          int ncol=col+dy[i];
          if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && ans[nrow][ncol]=='X' && mat[nrow][ncol]=='O'){
              dfs(nrow,ncol,mat,ans,n,m);
          }
      }
  }
  vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    { 
      vector<vector<char>> ans(n,vector<char>(m,'X'));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 || j==0 || i==n-1 || j == m-1){
                    if(mat[i][j] == 'O')
                        dfs(i,j,mat,ans,n,m);
                }
            }
        }
       return ans;
    }
