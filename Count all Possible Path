Input: 
paths = 0 1 1 1 1
        1 0 0 1 0
        1 0 0 1 0
        1 1 1 0 1
        1 0 0 1 0
Output: 1
Explanation: 
One can visit the vertices in the following way:
1->3->4->5->1->4->2->1 (assuming 1-based indexing)
Here all the vertices has been visited and all
paths are used exactly once.



class Solution {
public:

	int isPossible(vector<vector<int>>paths){
	    int n=paths.size();
	    int m=paths[0].size();
	    int count=0;
	    for(int row=0;row<n;row++){
	        for(int col=0;col<m;col++){
	            if(paths[row][col]==1){
	                count++;
	            }
	        }
	        if(count%2!=0){
	            return 0;
	        }
	    }
	    return 1;
	}

};
